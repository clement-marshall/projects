# Python function that simulates rolling dice many times. See how many times each outcome occurs. 
# Function should accept a variable number of sides of dice, and variable number of dice
# Output is the probability of each possible outcome (each outcome is the sum of the dice)
# Example: roll_dice(4, 6, 6, 1000000) simulates rolling one 4 sided die, and two 6 sided dice, and does the simulation a million times


#Perform the simulation for one die only. Only input variable is the number of sides of the die.
"""
import random
import collections

def roll_dice(sides_number):
    sim_number = 0
    random_number = 0
    outcomes_dict = {}
    numb_to_divide_by = 0
    while sim_number < 1000000:
        random_number = random.randint(1, sides_number)
        if random_number not in outcomes_dict:
            outcomes_dict[random_number] = 1
        else:
            outcomes_dict[random_number] += 1
        sim_number += 1
  
    for x in outcomes_dict.values():
        numb_to_divide_by += x
        
    ordered_list = collections.OrderedDict(sorted(outcomes_dict.items()))
    
    for a, b in ordered_list.items():
        print(str(a) + ": " + str((100 * b/numb_to_divide_by)) + "%")
"""


# Perform the simulation for up to 3 dice 
# For fewer than 3 dice, put 0 as an input for one or more of them. 
# also takes total number of sims as an input

import random
import collections

def roll_dice(sides_number1, sides_number2, sides_number3, total_sims):
    sim_number = 0
    random_number = 0
    outcomes_dict = {}
    numb_to_divide_by = 0
    while sim_number < total_sims:
        random_number = random.randint(1, sides_number1) + random.randint(1, sides_number2) + random.randint(1, sides_number3)
        if random_number not in outcomes_dict:
            outcomes_dict[random_number] = 1
        else:
            outcomes_dict[random_number] += 1
        sim_number += 1
  
    for x in outcomes_dict.values():
        numb_to_divide_by += x
        
    ordered_list = collections.OrderedDict(sorted(outcomes_dict.items()))
    
    for a, b in ordered_list.items():
        print(str(a) + ": " + str((100 * b/numb_to_divide_by)) + "%")
